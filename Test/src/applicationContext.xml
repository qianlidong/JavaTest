<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:task="http://www.springframework.org/schema/task"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
	 http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/task   http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-autowire="byName">
	<description>spring总装配文件</description>
    
	<!-- 新平台的库 -->
	<bean id="oracleDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="url">
			<value>jdbc:oracle:thin:@192.168.1.202:1521:rac</value>
		</property>
		<property name="username">
			<value>newcieccpay_test</value>
		</property>
		<property name="password">
			<value>newcieccpay_test</value>
		</property>
	</bean>
   
   
	<!-- 生产备份库 
	<bean id="oracleDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="url">
	<value>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
	(HOST=223.203.208.109)(PORT=1521)))
	(CONNECT_DATA=(SERVICE_NAME=racstandby)))</value>
		</property>
		<property name="username">
			<value>newcieccrdonly</value>
		</property>
		<property name="password">
			<value>FtvUaFBHnk9eaFg2</value>
		</property>
	</bean>
-->


<!-- mysql数据源 -->
  <bean id="mysqlDataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <property name="url">
            <value>jdbc:mysql://192.168.1.246:3306/beacon?useUnicode=true&amp;characterEncoding=UTF-8
            </value>
        </property>
        <property name="username">
            <value>beacon</value>
        </property>
        <property name="password">
            <value>beacon</value>
        </property>
    </bean>   

<bean id="dynamicDataSource" class="com.qian.dao.DynamicDataSource" >  
    <!-- 通过key-value的形式来关联数据源 -->  
    <property name="targetDataSources">  
        <map>  
            <entry value-ref="oracleDataSource" key="oracleDataSource"></entry>  
            <entry value-ref="mysqlDataSource" key="mysqlDataSource"></entry>  
        </map>  
    </property>  
    <property name="defaultTargetDataSource" ref="oracleDataSource" />  
</bean>   







<!-- 动态数据源end -->

	<!--关于transactionManager有一个长时间错误认识，其实ibitas的直接用jdbc的就行，没有自己的，不像hibernate有自己的 
		org.springframework.orm.hibernate3.HibernateTransactionManager -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>

	<!--这个是必须的 ，而且bean的名字一定要是sqlMapClient这个 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocations">
			<list>
				<value>classpath:/com/qian/model/sqlMapConfig.xml</value>
			</list>
		</property>
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>

<!-- 如果是hibernate的transactionManager,那这里的应该是TransactionInterceptor，而不是 TransactionProxyFactoryBean-->
	<bean id="baseTxService"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		lazy-init="true" abstract="true">
		<property name="transactionManager" ref="transactionManager" />
		<!-- <property name="proxyTargetClass" value="true" /> -->
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="new*">PROPAGATION_REQUIRED</prop>
				<prop key="set*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="load*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="is*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="check*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="fire*">PROPAGATION_REQUIRED</prop>
				<prop key="persist*">PROPAGATION_REQUIRED</prop>
				<prop key="sendFlowTaskCustom">PROPAGATION_REQUIRED</prop>
				<prop key="launch"> PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<prop key="approve">PROPAGATION_REQUIRED,-java.lang.Exception</prop>
				<!-- <prop key="*">PROPAGATION_NEVER</prop> -->
			</props>
		</property>
	</bean>

	<!-- 随便配置个service玩玩 -->
	<import resource="applicationContext-serivce.xml" />
	
	<!-- 定时任务的显示配置 -->
	<import resource="quartzJob.xml" />

	<!-- controller的配置吧 -->

	<bean id="docMapping"
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/*.do">myController</prop>
			</props>
		</property>
	</bean>


	<bean name="myController" class="com.qian.controller.MyProjectAdminController"
		autowire="byName" scope="session" />
	<!-- <context:annotation-config/> -->
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.qian" />

	<!-- 配置切面的机会来了 -->
	<aop:config expose-proxy="true">
		<aop:pointcut id="interceptorPointCuts"
			expression="(execution(* com.qian.service.*.*(..)))" />

		<aop:aspect ref="logInterceptor">
			<!-- <aop:before method="log" pointcut-ref="interceptorPointCuts"/> -->
			<aop:after method="log" pointcut-ref="interceptorPointCuts" />
			
		</aop:aspect>

	</aop:config>

	<bean id="logInterceptor" class="com.qian.log.handler.AopHandlerTest"
		autowire="byName">
	</bean>

<!-- 注解的方式配置事务 -->

<!--JDBC事务管理器,根据你的情况使用不同的事务管理器,如果工程中有Hibernate,就用Hibernate的事务管理器 
<bean id="transactionManagerzhujie" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource">  
            <ref local="dataSource"/>  
        </property>  
</bean>     
    -->          
<!-- 用注解来实现事务管理,这里用哪个manager都行，整个的都是jdbc这种原始的-->  
<tx:annotation-driven transaction-manager="transactionManager"/> 

 <!-- 启动定时器 -->
   <task:annotation-driven /> 
 
 	<!-- quartz Trigger -->	
	<bean id="schFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			<!-- -->
				<ref bean="oneTrigger" /> 
				<ref bean="twoTrigger" /> 
			</list>
		</property>
		<property name="autoStartup">
            <value>true</value>
        </property>
	</bean>

</beans>